----> Errores generales <----

Error [1]: No hay tokens para analizar


----> Errores identificador <----

Error [2], se esperaba operador de asignacion en el identificador 
Error [3], se esperaba numero, cadena u op_retorno en el identificador 
Error [4], se esperaba punto y coma ';' en el identificador 


----> Errores op_Retorno <----

Error [5], se esperaba parentesis que abre '(' en la OP_Retorno 
Error [6], se esperaba parentesis que cierra ')' en la OP_Retorno 
 

----> Errores for <----

Error [7], se esperaba parentesis que abre '(' en el ciclo For 
Error [8], se esperaba numero o identificador en el ciclo For 
Error [9], se esperaba parentesis que cierra ')' en el ciclo For 
Error [10], se esperaba llave que abre '{' en el ciclo For 
Error [11], se esperaba llave que cierra '}' en el ciclo For 


----> Errores inicio <----

Error [12], se esperaba 'INICIO' en el bloque inicial 
Error [13], se esperaba un identificador en el bloque inicial 
Error [14], se esperaba llave que abre '{' en el bloque inicial 
Error [15], se esperaba 'PRINCIPAL' en el bloque inicial 
Error [16], se esperaba parentesis que abre '(' en el bloque inicial 
Error [17], se esperaba parentesis que cierra ')' en el bloque inicial 
Error [18], se esperaba llave que cierra '}' en el bloque inicial 
Error [19], se esperaba 'FINAL' en el bloque inicial 
Error [20], se encontraron tokens despues de 'FINAL' eliminalos 
Error [21], se esperaba codigo para analizar en el bloque inicial 
Error [39], se esperaba llave que cierra '}' en el bloque PRINCIPAL
Error [40], se esperaba parentesis que abre '(' en el bloque PRINCIPAL 
Error [41], se esperaba parentesis que cierra ')' en el bloque PRINCIPAL
Error [42], se esperaba llave que abre '{' en el bloque PRINCIPAL

----> Errores funciones <----

Error [22], se esperaba parentesis que abre '(' en la funcion: " + ArreToken.get(pos - 2) + " "
Error [23], se esperaba parentesis que cierra ')' en la funcion: " + ArreToken.get(pos - 2) + " "
Error [24], se esperaba punto y coma ';' en la funcion: " + ArreToken.get(pos - 2) + " "
Error [25], se esperaba una cadena o un identificador en la funcion: " + ArreToken.get(pos - 2) + " "
Error [26], se esperaba coma ',' en la funcion: " + ArreToken.get(pos - 2) + " "


----> Errores if <----

Error [27], se esperaba parentesis que abre '(' en el if 
Error [28], se esperaba valor o identificador en el if 
Error [29], se esperaba operador relacional en el if 
Error [30], se esperaba parentesis que cierra ')' en el if  
Error [31], se esperaba llave que abre '{' en el if 
Error [32], se esperaba llave que cierra '}' en el if 


----> Errores while <----

Error [33], se esperaba parentesis que abre '(' en el while 
Error [34], se esperaba valor o identificador en el while  
Error [35], se esperaba operador relacional en el while  
Error [36], se esperaba parentesis que cierra ')' en el while   
Error [37], se esperaba llave que abre '{' en el while  
Error [38], se esperaba llave que cierra '}' en el while  


----> Errores Funciones Nuevas <----

Error [44], se esperaba una nÃºmero o un identificador en la funcion: " + ArreToken.get(pos - 2) + " "














if(hayOtro()){
    if(ArreNomToken.get(pos).equals("")){
        pos++;
        System.out.println(" encontrada");
		
    } // 
    else{
        error = "Error [], se esperaba   "+ArreFilaColumnaToken.get(pos-1);
            errores.add(error);
    } // 
}//Hay otro
else{
    error = "Error [], se esperaba   "+ArreFilaColumnaToken.get(pos-1);
    errores.add(error);
}




boolean test;
do {
 System.out.println("Analiznado el codigo dentro de estructura for");
 test = operacionCorrecta();
 if (errores.size() > 0) {
  System.out.println("Se encontro un error dentro del codigo en el for");
  return false;
 }
} while (test);
System.out.println("Saliendo de analizar el codigo dentro de la estructura de for");


/* FUNCIONES */
                case "OP_Cita":
                    System.out.println("Funcion encontrada");
                    pos++;
                    if (hayOtro()) {
                        if (funcionCorrecta()) {
                            gramaticas.add("Funcion correcta \n");
                            return true;
                        }

                    } else {
                        errores.add("Error [22], se esperaba parentesis que abre '(' en la funcion " + ArreFilaColumnaToken.get(pos - 1));
                    }
                    break;

                case "OP_Turno":
                    System.out.println("Funcion encontrada");
                    pos++;
                    if (hayOtro()) {
                        if (funcionCorrecta()) {
                            gramaticas.add("Funcion correcta \n");
                            return true;
                        }

                    } else {
                        errores.add("Error [22], se esperaba parentesis que abre '(' en la funcion " + ArreFilaColumnaToken.get(pos - 1));
                    }
                    break;

                case "OP_Iluminacion":
                    System.out.println("Funcion encontrada");
                    pos++;
                    if (hayOtro()) {
                        if (funcionCorrecta()) {
                            gramaticas.add("Funcion correcta \n");
                            return true;
                        }

                    } else {
                        errores.add("Error [22], se esperaba parentesis que abre '(' en la funcion " + ArreFilaColumnaToken.get(pos - 1));
                    }
                    break;

                case "OP_Temperatura":
                    System.out.println("Funcion encontrada");
                    pos++;
                    if (hayOtro()) {
                        if (funcionCorrecta()) {
                            gramaticas.add("Funcion correcta \n");
                            return true;
                        }

                    } else {
                        errores.add("Error [22], se esperaba parentesis que abre '(' en la funcion " + ArreFilaColumnaToken.get(pos - 1));
                    }
                    break;

                case "OP_Puerta":
                    System.out.println("Funcion encontrada");

                    pos++;
                    if (hayOtro()) {
                        if (funcionCorrecta()) {
                            gramaticas.add("Funcion correcta \n");
                            return true;
                        }

                    } else {
                        errores.add("Error [22], se esperaba parentesis que abre '(' en la funcion " + ArreFilaColumnaToken.get(pos - 1));
                    }
                    break;



for (ErrorLSSL error : errors) {
//                String strError = String.valueOf(error);
//                strErrors += strError + "\n";
//            }

nombre = ArreToken.get(pos);
System.out.println(ANSI_PURPLE +"Nombre de la variable: "+ArreToken.get(pos) + ANSI_RESET);

valor = ArreToken.get(pos);
System.out.println(ANSI_PURPLE +"Valor de la variable: "+ArreToken.get(pos) + ANSI_RESET);

tipo = "Numero";
System.out.println(ANSI_PURPLE +"Tipo de la variable: "+ArreNomToken.get(pos) + ANSI_RESET);

fila_columna = ArreFilaColumnaToken.get(pos - 1);
System.out.println(ANSI_PURPLE+"Fila_Columna de la variable: "+ArreFilaColumnaToken.get(pos - 1)+ANSI_RESET);

ArreVariables.add(new Variables(nombre,valor,tipo,fila_columna));